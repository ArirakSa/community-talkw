from datetime import timezone

from django.contrib.auth.views import *
from django.core.checks import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.utils.safestring import mark_safe
from django.views.generic import *
from .forms import *
from .models import *
from django.db.models import Count
from django.urls import reverse_lazy
from django.views.generic import UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.shortcuts import redirect
from django.db.models import Q
from django.urls import reverse
import re
from django.http import JsonResponse
from django.views import View
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from .models import ReportThread, Thread
from django.contrib import messages


# -------------------------
# üîπ Home Page (CBV)
# -------------------------
class HomeView(ListView):
    model = Thread
    template_name = "home.html"
    context_object_name = 'threads'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ context ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï

    def get_queryset(self):
        # ‡∏Å‡∏£‡∏≠‡∏á Thread ‡∏ï‡∏≤‡∏° Hashtag ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        hashtag_name = self.kwargs.get('hashtag_name', None)
        if hashtag_name:
            return Thread.objects.filter(hashtags__name=hashtag_name).order_by('-created_at')
        return Thread.objects.all().order_by('-created_at')


class ContentView(TemplateView):
    template_name = "content.html"
# -------------------------
# üîπ Authentication Views (CBV)
# -------------------------
class SignUpView(CreateView):
    model = CustomUser
    form_class = CustomUserCreationForm
    template_name = 'signup.html'
    success_url = reverse_lazy('signin')

class SignInView(LoginView):
    template_name = "signin.html"

    def get_success_url(self):
        next_url = self.request.GET.get("next")

        if self.request.user.is_authenticated:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            if self.request.user.role == 'user':
                if next_url:
                    return next_url
                else:
                    return reverse_lazy('home')
            else:
                messages.error(self.request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
                return reverse_lazy('signin')
        else:
            messages.error(self.request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            return reverse_lazy('signin')

class AdminSignInView(LoginView):
    template_name = "admin/admin_signin.html"

    def get_success_url(self):
        next_url = self.request.GET.get("next")

        if self.request.user.is_authenticated:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            if self.request.user.role == 'admin':
                if next_url:
                    return next_url
                else:
                    return reverse_lazy('admin_dashboard')
            else:
                messages.error(self.request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
                return reverse_lazy('signin')
        else:
            messages.error(self.request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            return reverse_lazy('signin')


class SignOutView(LogoutView):
    print("‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ß")
    next_page = reverse_lazy('signin')

class AdminSignOutView(LogoutView):
    next_page = reverse_lazy('admin_signin')

# -------------------------
# üîπ Profile Views (CBV)
# -------------------------
class ProfileView(LoginRequiredMixin, DetailView):
    model = CustomUser
    template_name = "profile.html"
    context_object_name = 'profile_user'

    def get_object(self, **kwargs):
        # ‡∏ñ‡πâ‡∏≤ `pk` ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô URL (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô)
        if self.kwargs.get('pk'):
            return get_object_or_404(CustomUser, pk=self.kwargs['pk'])
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `pk` ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
            return self.request.user

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° threads ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô context
        context['threads'] = self.get_object().threads.all()
        return context




@method_decorator(login_required, name="dispatch")
class EditProfileView(LoginRequiredMixin, View):
    def get(self, request):
        form = EditProfileForm(instance=request.user)
        return render(request, "edit_profile.html", {"form": form})

    def post(self, request):
        form = EditProfileForm(request.POST, request.FILES, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect("profile")
        return render(request, "edit_profile.html", {"form": form})

# -------------------------
# üîπ Thread Views (CBV)
# -------------------------



class SearchResultsView(ListView):
    model = Thread
    template_name = 'thread/search_results.html'
    context_object_name = 'threads'  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô template

    def get_queryset(self):
        query = self.request.GET.get('q', '')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å query parameter 'q'
        if query:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å title, content ‡πÅ‡∏•‡∏∞ hashtags ‡∏Ç‡∏≠‡∏á Thread
            return Thread.objects.filter(
                Q(title__icontains=query) |
                Q(content__icontains=query) |
                Q(hashtags__name__icontains=query)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á hashtags
            ).distinct()  # ‡πÉ‡∏ä‡πâ distinct ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ã‡πâ‡∏≥
        return Thread.objects.none()  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
def check_bad_words(content):
    bad_words = BadWord.objects.values_list('word', flat=True)  # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for bad_word in bad_words:
        if bad_word in content:
            return True  # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True
    return False

class ThreadCreateView(LoginRequiredMixin, CreateView):
    model = Thread
    form_class = ThreadForm
    template_name = 'thread/thread_form.html'
    success_url = reverse_lazy('home')  # ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ home ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à

    def form_valid(self, form):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î author ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        form.instance.author = self.request.user

        # ‡∏î‡∏∂‡∏á content ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        content = form.cleaned_data.get('content', '')

        if content:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            if check_bad_words(content):
                # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
                form.add_error('content', '‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç')
                return self.form_invalid(form)

            # ‡πÉ‡∏ä‡πâ regex ‡∏î‡∏∂‡∏á Hashtags
            hashtags = set(re.findall(r'#(\w+)', content))  # ‡πÉ‡∏ä‡πâ # ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            thread = form.save()

            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á hashtags ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            for hashtag in hashtags:
                clean_hashtag = hashtag.lower()  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
                hashtag_obj, created = Hashtag.objects.get_or_create(name=clean_hashtag)
                thread.hashtags.add(hashtag_obj)

        return super().form_valid(form)





class ThreadCreateView2(LoginRequiredMixin, CreateView):
    model = Thread
    form_class = ThreadForm
    template_name = 'thread/thread_form.html'
    success_url = reverse_lazy('home')  # ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ home ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à

    def form_valid(self, form):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î author ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        form.instance.author = self.request.user

        # ‡∏î‡∏∂‡∏á content ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        content = form.cleaned_data.get('content', '')

        if content:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            if check_bad_words(content):
                # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
                form.add_error('content', '‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç')
                return self.form_invalid(form)

            # ‡πÉ‡∏ä‡πâ regex ‡∏î‡∏∂‡∏á Hashtags
            hashtags = set(re.findall(r'#+(\w+)', content))

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            thread = form.save()

            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á hashtags ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            for hashtag in hashtags:
                clean_hashtag = hashtag.lower()  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
                hashtag_obj, created = Hashtag.objects.get_or_create(name=clean_hashtag)
                thread.hashtags.add(hashtag_obj)

        return super().form_valid(form)


class ThreadCreateView1(LoginRequiredMixin, CreateView):
    model = Thread
    form_class = ThreadForm
    template_name = 'thread/thread_form.html'
    success_url = reverse_lazy('home')  # ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ home ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à

    def form_valid(self, form):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î author ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        form.instance.author = self.request.user

        # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        content = form.cleaned_data.get('content', '')

        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ model BannedWord ‡∏°‡∏µ field 'word')
        banned_words = list(BannedWord.objects.values_list('word', flat=True))

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for banned in banned_words:
            # ‡πÉ‡∏ä‡πâ re.escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á special characters ‡πÉ‡∏ô banned word
            pattern = re.compile(re.escape(banned), re.IGNORECASE)
            if pattern.search(content):
                form.add_error('content', f'‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: "{banned}" ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ')
                return self.form_invalid(form)

        # ‡∏î‡∏∂‡∏á Hashtags ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ regex (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '#' ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
        hashtags = set(re.findall(r'#+(\w+)', content))

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        thread = form.save()

        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Hashtags ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        for hashtag in hashtags:
            clean_hashtag = hashtag.lower()  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
            hashtag_obj, created = Hashtag.objects.get_or_create(name=clean_hashtag)
            thread.hashtags.add(hashtag_obj)

        return super().form_valid(form)


class ThreadListView(ListView):
    model = Thread
    template_name = 'thread/thread_list.html'
    context_object_name = 'threads'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ context ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï

    def get_queryset(self):
        # ‡∏Å‡∏£‡∏≠‡∏á Thread ‡∏ï‡∏≤‡∏° Hashtag ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        hashtag_name = self.kwargs.get('hashtag_name', None)
        if hashtag_name:
            return Thread.objects.filter(hashtags__name=hashtag_name).order_by('-created_at')
        return Thread.objects.all().order_by('-created_at')



class ThreadDetailView(DetailView):
    model = Thread
    template_name = "thread/thread_detail.html"
    context_object_name = 'thread'

    def get(self, request, *args, **kwargs):
        thread = self.get_object()

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        if request.user.is_authenticated:
            Notification.objects.filter(user=request.user, thread=thread, is_read=False).update(is_read=True)

        return super().get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        thread = self.get_object()

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Threads ‡∏ó‡∏µ‡πà‡∏°‡∏µ Hashtags ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        hashtags = thread.hashtags.all()
        hashtag_ids = [hashtag.id for hashtag in hashtags]

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        comments = Comment.objects.filter(thread=thread)

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ threads ‡∏ó‡∏µ‡πà‡∏°‡∏µ hashtag ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö thread ‡∏ô‡∏µ‡πâ
        similar_threads = Thread.objects.filter(
            hashtags__in=hashtag_ids
        ).exclude(id=thread.id)  # ‡πÄ‡∏≠‡∏≤ thread ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ threads ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å content)
        query = Q(content__icontains=thread.title) | Q(content__icontains=thread.content[:100])  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
        content_similar_threads = Thread.objects.filter(query).exclude(id=thread.id)

        # ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ
        combined_threads = similar_threads | content_similar_threads

        # ‡∏Ñ‡∏≥‡πÅ‡∏™‡∏•‡∏á
        slangs = Slang.objects.all()
        content = thread.content  # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
        slang_info = []

        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡πÅ‡∏™‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ HTML ‡∏ó‡∏µ‡πà‡∏°‡∏µ tooltip
        for slang in slangs:
            if slang.word in content:
                replacement = (
                    f'<span class="group relative text-blue-500  cursor-pointer">'
                    f'{slang.word}'
                    f'<span class="absolute left-1/2 -translate-x-1/2 bottom-full mb-4 px-4 py-2 text-base text-white bg-black rounded opacity-0 group-hover:opacity-100 transition duration-300 whitespace-nowrap">'
                    f'{slang.meaning}'
                    f'</span>'
                    f'</span>'
                )
                content = content.replace(slang.word, replacement)
                slang_info.append({'word': slang.word, 'meaning': slang.meaning})


        # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á context
        context['slang_info'] = slang_info
        context['threads'] = combined_threads.distinct()
        context['comments'] = comments
        context['content'] = mark_safe(content)
        return context


class CommunityView(ListView):
    model = Thread
    template_name = 'community.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # ‡∏î‡∏∂‡∏á popular hashtags ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô threads ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô threads ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        context['popular_hashtags'] = Hashtag.objects.annotate(
            thread_count=Count('threads')
        ).order_by('-thread_count')[:20]  # ‡πÄ‡∏≠‡∏≤ 20 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢

        return context


class HashtagDetailView(LoginRequiredMixin, DetailView):
    model = Hashtag
    template_name = 'hashtag_detail.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        hashtag = self.get_object()
        context['threads'] = hashtag.threads.all()  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
        return context



class ThreadUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Thread
    form_class = ThreadForm
    template_name = 'thread/thread_form.html'

    def test_func(self):
        thread = self.get_object()
        return self.request.user == thread.author

    def get_success_url(self):
        return reverse_lazy('profile')


class ThreadDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Thread
    success_url = reverse_lazy('profile')

    def test_func(self):
        thread = self.get_object()
        return self.request.user == thread.author

    def post(self, request, *args, **kwargs):
        thread = self.get_object()
        thread.delete()
        return JsonResponse({"success": True})

class ReportThreadView(LoginRequiredMixin, View):
    def post(self, request, pk, *args, **kwargs):
        thread = Thread.objects.get(pk=pk)
        reason = request.POST.get("reason", "").strip()
        image = request.FILES.get("image")

        if not reason and not image:
            return JsonResponse({"success": False, "error": "Please provide a reason or attach an image."}, status=400)

        report = ReportThread.objects.create(thread=thread, user=request.user, reason=reason)

        if image:
            file_path = f"reports/{thread.id}/{image.name}"
            default_storage.save(file_path, ContentFile(image.read()))
            report.image = file_path
            report.save()

        return JsonResponse({"success": True})






class CommentCreateView1(LoginRequiredMixin, View):
    def post(self, request, thread_id):
        content = request.POST.get("content", "").strip()
        if not content:
            return JsonResponse({"success": False, "error": "Comment cannot be empty."}, status=400)

        thread = Thread.objects.get(pk=thread_id)
        comment = Comment.objects.create(
            thread=thread,
            content=content,
            author=request.user
        )

        return JsonResponse({"success": True})



class CommentCreateView(LoginRequiredMixin, View):
    def post(self, request, thread_id):
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å request
        content = request.POST.get('content', '').strip()

        # ‡∏ñ‡πâ‡∏≤ content ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if not content:
            return JsonResponse({"success": False, "error": "Comment cannot be empty."}, status=400)

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
        thread = get_object_or_404(Thread, pk=thread_id)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡πÉ‡∏´‡∏°‡πà
        comment = Comment.objects.create(
            thread=thread,
            content=content,
            author=request.user
        )

        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
        if request.user != thread.author:
            notification_message = f'{request.user.username} commented on your thread: "{thread.title}"'
            Notification.objects.create(
                sender=request.user,
                user=thread.author,  # ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
                message=notification_message,
                thread=thread,
                is_read=False
            )

        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ JsonResponse
        return JsonResponse({"success": True, "message": "Comment added successfully."})


class NotificationListView1(LoginRequiredMixin, ListView):
    model = Notification
    template_name = "notifications.html"
    context_object_name = "notifications"

    def get_queryset(self):
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        return Notification.objects.filter(user=self.request.user).order_by("-created_at")



# ‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡πÉ‡∏´‡∏°‡πà
class CreateNotificationView(LoginRequiredMixin, View):
    def post(self, request, thread_id):
        thread = Thread.objects.get(id=thread_id)  # ‡∏î‡∏∂‡∏á thread ‡∏à‡∏≤‡∏Å id
        user = request.user  # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        message = request.POST['message']  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡πÉ‡∏´‡∏°‡πà
        comment = Comment.objects.create(
            thread=thread,
            user=user,
            message=message,
            created_at=timezone.now()
        )

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á thread
        notification = Notification.objects.create(
            sender=user,
            user=thread.user,  # ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
            message=f'{user.username} commented on your thread: {message}',
            thread=thread,
            is_read=False,
        )
        return JsonResponse({'success': True, 'message': 'Notification sent and comment added.'})


# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Mark Notification ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô
class MarkNotificationAsReadView(LoginRequiredMixin, View):
    def post(self, request, notification_id):
        try:
            # ‡∏î‡∏∂‡∏á Notification ‡∏ï‡∏≤‡∏° id ‡πÅ‡∏•‡∏∞ user
            notification = Notification.objects.get(id=notification_id, user=request.user)
            notification.is_read = True
            notification.save(update_fields=['is_read'])
            return JsonResponse({'success': True})
        except Notification.DoesNotExist:
            return JsonResponse({'success': False}, status=404)


# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
class NotificationListView1(LoginRequiredMixin, ListView):
    model = Notification
    template_name = "notifications.html"
    context_object_name = "notifications"

    def get_queryset(self):
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        notifications = Notification.objects.filter(user=self.request.user).order_by("-created_at")
        return notifications

    def get_context_data(self, **kwargs):
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
        context = super().get_context_data(**kwargs)
        unread_notifications_count = Notification.objects.filter(user=self.request.user, is_read=False).count()
        context['unread_notifications_count'] = unread_notifications_count
        return context


class NotificationListView2(LoginRequiredMixin, ListView):
    model = Notification
    template_name = "notifications.html"
    context_object_name = "notifications"

    def get_queryset(self):
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        return Notification.objects.filter(user=self.request.user).order_by("-created_at")

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
        unread_notifications_count = Notification.objects.filter(user=self.request.user, is_read=False).count()
        context['unread_notifications_count'] = unread_notifications_count

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ notification ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (is_read = True) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤
        Notification.objects.filter(user=self.request.user, is_read=False).update(is_read=True)

        return context

class NotificationListView(LoginRequiredMixin, ListView):
    model = Notification
    template_name = "notifications.html"
    context_object_name = "notifications"

    def get_queryset(self):
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        notifications = Notification.objects.filter(user=self.request.user).order_by("-created_at")
        return notifications

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notifications ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
        unread_notifications_count = Notification.objects.filter(user=self.request.user, is_read=False).count()
        context['unread_notifications_count'] = unread_notifications_count
        return context

# -------------------------
# üîπ Admin Views (CBV)
# -------------------------

class AdminDashboardView(TemplateView):
    template_name = "admin/admin_dashboard.html"


class UserManagementView(TemplateView):
    template_name = "admin/user_management.html"


class ContentManagementView(TemplateView):
    template_name = "admin/content_management.html"


from django.views.generic import CreateView, ListView
from django.urls import reverse_lazy
from .models import Slang, Article
from .forms import SlangForm, ArticleForm

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏¢‡∏≤‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏™‡∏•‡∏á
class SlangCreateView(CreateView):
    model = Slang
    form_class = SlangForm
    template_name = 'admin/add_slang.html'
    success_url = reverse_lazy('content_management')  # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Content Management

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
class ArticleCreateView(CreateView):
    model = Article
    form_class = ArticleForm
    template_name = 'admin/add_article.html'
    success_url = reverse_lazy('content_management')  # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Content Management

# ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
class ContentManagementView(ListView):
    model = Article
    template_name = 'admin/content_management.html'
    context_object_name = 'contents'


from django.views.generic import UpdateView, DeleteView
from django.urls import reverse_lazy
from .models import Article

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
class ArticleUpdateView(UpdateView):
    model = Article
    fields = ['title', 'content', 'created_by']
    template_name = 'admin/edit_article.html'
    success_url = reverse_lazy('content_management')

# ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
class ArticleDeleteView(DeleteView):
    model = Article
    template_name = 'admin/confirm_delete.html'
    success_url = reverse_lazy('content_management')
